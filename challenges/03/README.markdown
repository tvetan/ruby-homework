# Object#thread

Понеже ви казахме, че Monkey patching-а е нещо, което трябва да се избягва по
принцип, решихме отново да ви накараме да го приложите. :-)

Дефинирайте метод `Object#thread`, който приема списък от произволен брой
операции, които имат вида на `Proc`, `lambda`, или `Symbol`, и ги прилага
последователно отляво надясно, по следния начин:

Подава като аргумент на първата операция обекта, на който е извикан `thread`,
резултатът от това прилагане се подава като аргумент на втората операция и така
нататък, докато не се изчерпят всички операции. Ако операцията е подадена като
`Symbol`, то резултатът не се подава като аргумент, а му се вика съответния
метод (вижте примерите).

Пример:

    -42.thread :abs, -> x { x ** 3 }, :succ, -> x { x - 2 } # Резултат: 74087

Горният пример е еквивалентен на израза:

    ((((-42.abs) ** 3).succ) - 2)

Пример:

    "Marvin".thread :size, -> x { x ** 4 }, :to_s, -> s { s.split "" }, -> a { a[0] + a[-1] }, :to_i # Резултат: 12

Горният пример е еквивалентен на израза:

    (((-> a { a[0] + a[1] }).(((("Marvin".size) ** 4).to_s).split "")).to_i)

За още примери разгледайте sample\_spec-a.


P.S. Има вероятност да ви е полезен методът `Object#send`, който приема като
аргумент символ и извиква метода на обекта, който има същото име като символа,
например:

    -42.send :abs # Извиква -42.abs и връща 42

Както винаги, ваш приятел е [документацията](http://ruby-doc.org/core-2.1.0/Object.html#method-i-send)
